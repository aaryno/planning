name: Module 6 PostGIS Spatial Database - Comprehensive Testing and Grading

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allow manual runs

env:
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  POSTGRES_USER: gis_student
  POSTGRES_PASSWORD: gis604b
  PYTHON_VERSION: "3.11"

jobs:
  module-overview:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📋 Module 6 Overview
        run: |
          echo "🌍 GIST 604B - MODULE 6: POSTGIS SPATIAL DATABASE" >> $GITHUB_STEP_SUMMARY
          echo "======================================================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This module teaches enterprise-level spatial database skills:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📚 Assignment Structure:" >> $GITHUB_STEP_SUMMARY
          echo "- **Assignment 1:** PostGIS Basics (20 points) - Database connectivity and basic operations" >> $GITHUB_STEP_SUMMARY
          echo "- **Assignment 2:** Spatial Analysis (20 points) - Advanced spatial queries and analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Assignment 3:** Advanced Queries (25 points) - Performance optimization and integration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Points:** 65 points" >> $GITHUB_STEP_SUMMARY
          echo "**Professional Skills:** Enterprise spatial database management and optimization" >> $GITHUB_STEP_SUMMARY

  test-postgis-basics:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_PASSWORD: gis604b
          POSTGRES_USER: gis_student
          POSTGRES_DB: gis_analysis
        options: >-
          --health-cmd "pg_isready -U gis_student -d gis_analysis"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s
        ports:
          - 5432:5432

    outputs:
      basics_grade: ${{ steps.grade.outputs.grade }}
      basics_points: ${{ steps.grade.outputs.points }}
      basics_status: ${{ steps.grade.outputs.status }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev

      - name: 🔧 Test PostGIS Basics Assignment
        id: test
        working-directory: ./postgis-basics
        run: |
          if [ ! -f "pyproject.toml" ]; then
            echo "❌ PostGIS Basics assignment not found or incomplete"
            echo "status=missing" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📦 Installing dependencies..."
          python -m pip install --upgrade pip
          pip install -e .

          echo "🗄️ Waiting for PostgreSQL..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U gis_student -d gis_analysis; then
              echo "✅ PostgreSQL is ready"
              break
            fi
            echo "⏳ Waiting for PostgreSQL... attempt $i/30"
            sleep 2
          done

          echo "🧪 Running PostGIS Basics tests..."
          if python -m pytest tests/ --verbose --tb=short --junit-xml=test-results.xml; then
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Calculate Grade
        id: grade
        working-directory: ./postgis-basics
        if: steps.test.outputs.status != 'missing'
        run: |
          if [ -f ".github/scripts/calculate_grade.py" ]; then
            python .github/scripts/calculate_grade.py --results test-results.xml --output grade-report.json
          else
            echo "Using basic grading calculation..."
            python -c "
            import json
            import xml.etree.ElementTree as ET
            import os

            try:
                tree = ET.parse('test-results.xml')
                root = tree.getroot()

                total_tests = int(root.get('tests', 0))
                failures = int(root.get('failures', 0))
                errors = int(root.get('errors', 0))
                passed = total_tests - failures - errors

                if total_tests > 0:
                    percentage = (passed / total_tests) * 100
                    points = round((passed / total_tests) * 20, 1)
                else:
                    percentage = 0
                    points = 0

                grade_data = {
                    'assignment': 'PostGIS Basics',
                    'total_points': 20,
                    'earned_points': points,
                    'percentage': percentage,
                    'tests_passed': passed,
                    'tests_total': total_tests
                }

                with open('grade-report.json', 'w') as f:
                    json.dump(grade_data, f, indent=2)

                print(f'Grade: {percentage:.1f}% ({points}/20 points)')

                # Set outputs
                with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write(f'grade={percentage:.1f}\n')
                    f.write(f'points={points}\n')
                    if percentage >= 70:
                        f.write('status=passing\n')
                    else:
                        f.write('status=needs_work\n')

            except Exception as e:
                print(f'Error calculating grade: {e}')
                with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write('grade=0\n')
                    f.write('points=0\n')
                    f.write('status=error\n')
            "
          fi

  test-spatial-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_PASSWORD: gis604b
          POSTGRES_USER: gis_student
          POSTGRES_DB: spatial_analysis
        options: >-
          --health-cmd "pg_isready -U gis_student -d spatial_analysis"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s
        ports:
          - 5432:5432

    outputs:
      analysis_grade: ${{ steps.grade.outputs.grade }}
      analysis_points: ${{ steps.grade.outputs.points }}
      analysis_status: ${{ steps.grade.outputs.status }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev gdal-bin

      - name: 🔧 Test Spatial Analysis Assignment
        id: test
        working-directory: ./spatial-analysis
        run: |
          if [ ! -f "pyproject.toml" ]; then
            echo "❌ Spatial Analysis assignment not found or incomplete"
            echo "status=missing" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📦 Installing dependencies..."
          python -m pip install --upgrade pip
          pip install -e .

          echo "🗄️ Waiting for PostgreSQL..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U gis_student -d spatial_analysis; then
              echo "✅ PostgreSQL is ready"
              break
            fi
            echo "⏳ Waiting for PostgreSQL... attempt $i/30"
            sleep 2
          done

          echo "🧪 Running Spatial Analysis tests..."
          if python -m pytest tests/ --verbose --tb=short --junit-xml=test-results.xml; then
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Calculate Grade
        id: grade
        working-directory: ./spatial-analysis
        if: steps.test.outputs.status != 'missing'
        run: |
          echo "Calculating Spatial Analysis grade..."
          python -c "
          import json
          import xml.etree.ElementTree as ET
          import os

          try:
              tree = ET.parse('test-results.xml')
              root = tree.getroot()

              total_tests = int(root.get('tests', 0))
              failures = int(root.get('failures', 0))
              errors = int(root.get('errors', 0))
              passed = total_tests - failures - errors

              if total_tests > 0:
                  percentage = (passed / total_tests) * 100
                  points = round((passed / total_tests) * 20, 1)
              else:
                  percentage = 0
                  points = 0

              grade_data = {
                  'assignment': 'Spatial Analysis',
                  'total_points': 20,
                  'earned_points': points,
                  'percentage': percentage,
                  'tests_passed': passed,
                  'tests_total': total_tests
              }

              with open('grade-report.json', 'w') as f:
                  json.dump(grade_data, f, indent=2)

              print(f'Grade: {percentage:.1f}% ({points}/20 points)')

              # Set outputs
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f'grade={percentage:.1f}\n')
                  f.write(f'points={points}\n')
                  if percentage >= 70:
                      f.write('status=passing\n')
                  else:
                      f.write('status=needs_work\n')

          except Exception as e:
              print(f'Error calculating grade: {e}')
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write('grade=0\n')
                  f.write('points=0\n')
                  f.write('status=error\n')
          "

  test-advanced-queries:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_PASSWORD: gis604b
          POSTGRES_USER: gis_student
          POSTGRES_DB: advanced_ops
        options: >-
          --health-cmd "pg_isready -U gis_student -d advanced_ops"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s
        ports:
          - 5432:5432

    outputs:
      advanced_grade: ${{ steps.grade.outputs.grade }}
      advanced_points: ${{ steps.grade.outputs.points }}
      advanced_status: ${{ steps.grade.outputs.status }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev gdal-bin

      - name: 🔧 Test Advanced Queries Assignment
        id: test
        working-directory: ./advanced-queries
        run: |
          if [ ! -f "pyproject.toml" ]; then
            echo "❌ Advanced Queries assignment not found or incomplete"
            echo "status=missing" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📦 Installing dependencies..."
          python -m pip install --upgrade pip
          pip install -e .

          echo "🗄️ Waiting for PostgreSQL..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U gis_student -d advanced_ops; then
              echo "✅ PostgreSQL is ready"
              break
            fi
            echo "⏳ Waiting for PostgreSQL... attempt $i/30"
            sleep 2
          done

          echo "🧪 Running Advanced Queries tests..."
          if python -m pytest tests/ --verbose --tb=short --junit-xml=test-results.xml; then
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Calculate Grade
        id: grade
        working-directory: ./advanced-queries
        if: steps.test.outputs.status != 'missing'
        run: |
          echo "Calculating Advanced Queries grade..."
          python -c "
          import json
          import xml.etree.ElementTree as ET
          import os

          try:
              tree = ET.parse('test-results.xml')
              root = tree.getroot()

              total_tests = int(root.get('tests', 0))
              failures = int(root.get('failures', 0))
              errors = int(root.get('errors', 0))
              passed = total_tests - failures - errors

              if total_tests > 0:
                  percentage = (passed / total_tests) * 100
                  points = round((passed / total_tests) * 25, 1)  # 25 points total
              else:
                  percentage = 0
                  points = 0

              grade_data = {
                  'assignment': 'Advanced Queries',
                  'total_points': 25,
                  'earned_points': points,
                  'percentage': percentage,
                  'tests_passed': passed,
                  'tests_total': total_tests
              }

              with open('grade-report.json', 'w') as f:
                  json.dump(grade_data, f, indent=2)

              print(f'Grade: {percentage:.1f}% ({points}/25 points)')

              # Set outputs
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f'grade={percentage:.1f}\n')
                  f.write(f'points={points}\n')
                  if percentage >= 70:
                      f.write('status=passing\n')
                  else:
                      f.write('status=needs_work\n')

          except Exception as e:
              print(f'Error calculating grade: {e}')
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write('grade=0\n')
                  f.write('points=0\n')
                  f.write('status=error\n')
          "

  module-summary:
    runs-on: ubuntu-latest
    needs: [module-overview, test-postgis-basics, test-spatial-analysis, test-advanced-queries]
    if: always()

    steps:
      - name: 📊 Calculate Module Grade
        id: module_grade
        run: |
          # Get grades from previous jobs (with defaults if missing/failed)
          BASICS_POINTS="${{ needs.test-postgis-basics.outputs.basics_points || '0' }}"
          ANALYSIS_POINTS="${{ needs.test-spatial-analysis.outputs.analysis_points || '0' }}"
          ADVANCED_POINTS="${{ needs.test-advanced-queries.outputs.advanced_points || '0' }}"

          BASICS_STATUS="${{ needs.test-postgis-basics.outputs.basics_status || 'not_attempted' }}"
          ANALYSIS_STATUS="${{ needs.test-spatial-analysis.outputs.analysis_status || 'not_attempted' }}"
          ADVANCED_STATUS="${{ needs.test-advanced-queries.outputs.advanced_status || 'not_attempted' }}"

          echo "Assignment Status Summary:"
          echo "  PostGIS Basics: $BASICS_STATUS ($BASICS_POINTS/20)"
          echo "  Spatial Analysis: $ANALYSIS_STATUS ($ANALYSIS_POINTS/20)"
          echo "  Advanced Queries: $ADVANCED_STATUS ($ADVANCED_POINTS/25)"

          # Calculate total points and percentage
          python -c "
          basics_points = float('$BASICS_POINTS')
          analysis_points = float('$ANALYSIS_POINTS')
          advanced_points = float('$ADVANCED_POINTS')

          total_points = basics_points + analysis_points + advanced_points
          total_possible = 65
          percentage = (total_points / total_possible) * 100

          # Determine letter grade
          if percentage >= 90:
              letter_grade = 'A'
          elif percentage >= 80:
              letter_grade = 'B'
          elif percentage >= 70:
              letter_grade = 'C'
          elif percentage >= 60:
              letter_grade = 'D'
          else:
              letter_grade = 'F'

          print(f'Total Points: {total_points}/{total_possible}')
          print(f'Module Percentage: {percentage:.1f}%')
          print(f'Module Letter Grade: {letter_grade}')

          import os
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'total_points={total_points}\n')
              f.write(f'percentage={percentage:.1f}\n')
              f.write(f'letter_grade={letter_grade}\n')
          "

      - name: 📋 Generate Module Summary
        run: |
          echo "🌍 MODULE 6 FINAL SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "=========================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Overall Module Performance" >> $GITHUB_STEP_SUMMARY
          echo "**Final Grade: ${{ steps.module_grade.outputs.letter_grade }} (${{ steps.module_grade.outputs.percentage }}%)**" >> $GITHUB_STEP_SUMMARY
          echo "**Total Points: ${{ steps.module_grade.outputs.total_points }}/65**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Individual Assignment Results" >> $GITHUB_STEP_SUMMARY
          echo "| Assignment | Status | Points | Grade |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|---------|-------|" >> $GITHUB_STEP_SUMMARY

          # PostGIS Basics
          if [[ "${{ needs.test-postgis-basics.outputs.basics_status }}" == "passing" ]]; then
            echo "| PostGIS Basics | ✅ Complete | ${{ needs.test-postgis-basics.outputs.basics_points }}/20 | ${{ needs.test-postgis-basics.outputs.basics_grade }}% |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-postgis-basics.outputs.basics_status }}" == "needs_work" ]]; then
            echo "| PostGIS Basics | ⚠️ Needs Work | ${{ needs.test-postgis-basics.outputs.basics_points }}/20 | ${{ needs.test-postgis-basics.outputs.basics_grade }}% |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-postgis-basics.outputs.basics_status }}" == "missing" ]]; then
            echo "| PostGIS Basics | ❌ Not Found | 0/20 | 0% |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| PostGIS Basics | ❌ Error | 0/20 | 0% |" >> $GITHUB_STEP_SUMMARY
          fi

          # Spatial Analysis
          if [[ "${{ needs.test-spatial-analysis.outputs.analysis_status }}" == "passing" ]]; then
            echo "| Spatial Analysis | ✅ Complete | ${{ needs.test-spatial-analysis.outputs.analysis_points }}/20 | ${{ needs.test-spatial-analysis.outputs.analysis_grade }}% |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-spatial-analysis.outputs.analysis_status }}" == "needs_work" ]]; then
            echo "| Spatial Analysis | ⚠️ Needs Work | ${{ needs.test-spatial-analysis.outputs.analysis_points }}/20 | ${{ needs.test-spatial-analysis.outputs.analysis_grade }}% |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-spatial-analysis.outputs.analysis_status }}" == "missing" ]]; then
            echo "| Spatial Analysis | ❌ Not Found | 0/20 | 0% |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Spatial Analysis | ❌ Error | 0/20 | 0% |" >> $GITHUB_STEP_SUMMARY
          fi

          # Advanced Queries
          if [[ "${{ needs.test-advanced-queries.outputs.advanced_status }}" == "passing" ]]; then
            echo "| Advanced Queries | ✅ Complete | ${{ needs.test-advanced-queries.outputs.advanced_points }}/25 | ${{ needs.test-advanced-queries.outputs.advanced_grade }}% |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-advanced-queries.outputs.advanced_status }}" == "needs_work" ]]; then
            echo "| Advanced Queries | ⚠️ Needs Work | ${{ needs.test-advanced-queries.outputs.advanced_points }}/25 | ${{ needs.test-advanced-queries.outputs.advanced_grade }}% |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-advanced-queries.outputs.advanced_status }}" == "missing" ]]; then
            echo "| Advanced Queries | ❌ Not Found | 0/25 | 0% |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Advanced Queries | ❌ Error | 0/25 | 0% |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Professional Skills Developed" >> $GITHUB_STEP_SUMMARY
          echo "Through Module 6, you've developed enterprise-level skills in:" >> $GITHUB_STEP_SUMMARY
          echo "- 🗄️ **Enterprise Database Management:** PostGIS setup, configuration, and optimization" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Advanced Spatial Analysis:** Complex queries spanning multiple datasets and relationships" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **Performance Optimization:** Spatial indexing, query tuning, and scalability techniques" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **System Integration:** API development, data export, and multi-system connectivity" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ **Architecture & Pipelines:** Production-ready spatial data workflows and automation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add grade-specific feedback
          if (( $(echo "${{ steps.module_grade.outputs.percentage }} >= 90" | bc -l) )); then
            echo "### 🎉 Exceptional Achievement!" >> $GITHUB_STEP_SUMMARY
            echo "You've mastered advanced spatial database concepts and are ready for senior-level GIS roles requiring enterprise database expertise. Your skills in PostGIS optimization and system integration position you well for database administrator, spatial architect, or senior developer positions." >> $GITHUB_STEP_SUMMARY
          elif (( $(echo "${{ steps.module_grade.outputs.percentage }} >= 80" | bc -l) )); then
            echo "### 👍 Strong Performance!" >> $GITHUB_STEP_SUMMARY
            echo "You've developed solid spatial database skills suitable for professional GIS development roles. Continue practicing advanced optimization techniques and system integration to reach expert-level proficiency." >> $GITHUB_STEP_SUMMARY
          elif (( $(echo "${{ steps.module_grade.outputs.percentage }} >= 70" | bc -l) )); then
            echo "### ⚠️ Good Foundation, Room for Growth" >> $GITHUB_STEP_SUMMARY
            echo "You've grasped core spatial database concepts but should focus on strengthening advanced query optimization and system integration skills. Review the failing assignments and practice complex spatial operations." >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🔧 Needs Development" >> $GITHUB_STEP_SUMMARY
            echo "Focus on completing the foundational PostGIS assignments before advancing to complex operations. Strong database skills are essential for professional GIS roles - consider additional practice with SQL and spatial operations." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💼 Career Applications" >> $GITHUB_STEP_SUMMARY
          echo "The spatial database skills you've developed are directly applicable to:" >> $GITHUB_STEP_SUMMARY
          echo "- **Enterprise GIS Roles:** Database administrator, spatial data architect, senior GIS developer" >> $GITHUB_STEP_SUMMARY
          echo "- **Application Development:** Web GIS backends, mobile app data services, real-time spatial systems" >> $GITHUB_STEP_SUMMARY
          echo "- **Data Engineering:** ETL pipeline design, big data processing, cloud-based spatial analytics" >> $GITHUB_STEP_SUMMARY
          echo "- **Consulting:** System integration, performance optimization, enterprise spatial solutions" >> $GITHUB_STEP_SUMMARY

      - name: 🎓 Final Module Status
        run: |
          echo "=============================================="
          echo "🌍 GIST 604B - MODULE 6: POSTGIS SPATIAL DATABASE"
          echo "=============================================="
          echo ""
          echo "📊 FINAL MODULE GRADE: ${{ steps.module_grade.outputs.letter_grade }} (${{ steps.module_grade.outputs.percentage }}%)"
          echo "🎯 TOTAL POINTS: ${{ steps.module_grade.outputs.total_points }}/65"
          echo ""
          echo "📋 ASSIGNMENT BREAKDOWN:"
          echo "  🔌 PostGIS Basics: ${{ needs.test-postgis-basics.outputs.basics_points || '0' }}/20 points"
          echo "  🔍 Spatial Analysis: ${{ needs.test-spatial-analysis.outputs.analysis_points || '0' }}/20 points"
          echo "  ⚡ Advanced Queries: ${{ needs.test-advanced-queries.outputs.advanced_points || '0' }}/25 points"
          echo ""
          echo "🚀 PROFESSIONAL READINESS:"
          if (( $(echo "${{ steps.module_grade.outputs.percentage }} >= 85" | bc -l) )); then
            echo "   ✅ Ready for senior-level spatial database roles"
            echo "   ✅ Strong foundation for database administration"
            echo "   ✅ Prepared for enterprise GIS architecture positions"
          elif (( $(echo "${{ steps.module_grade.outputs.percentage }} >= 75" | bc -l) )); then
            echo "   ✅ Ready for professional GIS developer roles"
            echo "   ⚠️  Continue developing optimization expertise"
            echo "   ⚠️  Practice advanced integration patterns"
          else
            echo "   🔧 Focus on completing foundational assignments"
            echo "   📚 Review spatial SQL and PostGIS documentation"
            echo "   💪 Strong database skills are essential for career advancement"
          fi
          echo ""
          echo "=============================================="
          echo "💡 Module 6 provides the database skills that distinguish"
          echo "   enterprise GIS professionals from basic users!"
          echo "=============================================="

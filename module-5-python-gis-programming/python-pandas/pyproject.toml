[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pandas-analysis-automated"
version = "0.1.0"
description = "Automated assessment assignment for Python pandas data analysis"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "GIST 604B", email = "instructor@example.edu" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Education",
]

dependencies = [
    "pandas==2.1.4",
    "numpy==1.26.2",
    "matplotlib==3.8.2",
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest==7.4.0",
    "pytest-cov==4.1.0",
    "pytest-benchmark==4.0.0",
    "pytest-github-actions-annotate-failures==0.2.0",
    "pytest-xdist==3.5.0",  # Parallel test execution

    # Code quality tools
    "black==23.12.1",
    "ruff==0.1.8",
    "mypy==1.7.1",

    # Security and analysis
    "bandit==1.7.5",
    "safety==3.0.1",

    # Documentation
    "sphinx==7.2.6",
    "sphinx-rtd-theme==2.0.0",

    # Jupyter support (for development)
    "jupyter==1.0.0",
    "ipykernel==6.27.1",
]

test = [
    "pytest==7.4.0",
    "pytest-cov==4.1.0",
    "pytest-benchmark==4.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/pandas-analysis-automated"
Documentation = "https://github.com/your-org/pandas-analysis-automated#readme"
Repository = "https://github.com/your-org/pandas-analysis-automated.git"
Issues = "https://github.com/your-org/pandas-analysis-automated/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/pandas_analysis"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/pandas_analysis",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-fail-under=80",
    "-ra",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as performance benchmarks",
    "unit: marks tests as unit tests (default)",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",
]
show_missing = true
precision = 2

[tool.black]
line-length = 88
target-version = ["py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PL",  # pylint
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (black handles this)
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR2004", # magic value used in comparison
    "SIM108",  # use ternary operator (not always clearer)
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["pandas_analysis"]
force-single-line = false

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_context = true
show_column_numbers = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "matplotlib.*",
    "pytest.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection tests

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/conftest.py"]

# Performance benchmark configuration
[tool.pytest-benchmark]
only-benchmark = false
benchmark-skip = false
benchmark-sort = "mean"
benchmark-group-by = "group"
benchmark-min-rounds = 5
benchmark-max-time = 0.005
benchmark-timer = "time.perf_counter"
benchmark-disable-gc = true
benchmark-save = "benchmark"
benchmark-json = "benchmark.json"

# GitHub Actions specific configuration
[tool.coverage.json]
output = "coverage.json"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.html]
directory = "htmlcov"

name: üóÑÔ∏è PostGIS Basics Assignment Grading

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test-postgis-assignment:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: gis_fundamentals
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d gis_fundamentals"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s

    env:
      DB_HOST: localhost
      DB_NAME: gis_fundamentals
      DB_USER: postgres
      DB_PASS: postgres
      DB_PORT: 5433

    steps:
      - name: üì• Checkout Assignment Code
        uses: actions/checkout@v4

      - name: üêç Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: üì¶ Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary pytest pytest-html pytest-json-report

      - name: üóÑÔ∏è Wait for PostGIS Database to be Ready
        run: |
          until pg_isready -h localhost -p 5433 -U postgres -d gis_fundamentals; do
            echo "Waiting for PostGIS database to start..."
            sleep 3
          done
          echo "‚úÖ PostGIS database is ready!"

      - name: üìä Load Spatial Data into Database
        run: |
          echo "üåç Loading PostGIS spatial datasets..."
          PGPASSWORD=postgres psql -h localhost -p 5433 -U postgres -d gis_fundamentals -f data/load_spatial_data.sql
          echo "‚úÖ Spatial data loaded successfully!"

      - name: ‚úÖ Verify PostGIS Setup and Data
        run: |
          echo "üîç Verifying PostGIS installation and spatial data..."
          PGPASSWORD=postgres psql -h localhost -p 5433 -U postgres -d gis_fundamentals -c "
            -- Check PostGIS version
            SELECT 'PostGIS Version: ' || postgis_version();

            -- Check spatial tables and record counts
            SELECT 'cities' as table_name, COUNT(*) as record_count,
                   ST_GeometryType(geom) as geometry_type,
                   ST_SRID(geom) as spatial_reference
            FROM cities LIMIT 1

            UNION ALL

            SELECT 'national_parks', COUNT(*),
                   ST_GeometryType(geom),
                   ST_SRID(geom)
            FROM national_parks LIMIT 1

            UNION ALL

            SELECT 'highways', COUNT(*),
                   ST_GeometryType(geom),
                   ST_SRID(geom)
            FROM highways LIMIT 1

            UNION ALL

            SELECT 'weather_stations', COUNT(*),
                   ST_GeometryType(geom),
                   ST_SRID(geom)
            FROM weather_stations LIMIT 1

            UNION ALL

            SELECT 'states', COUNT(*),
                   ST_GeometryType(geom),
                   ST_SRID(geom)
            FROM states LIMIT 1;
          "

      - name: üß™ Run PostGIS Assignment Test Suite
        run: |
          echo "üöÄ Running automated test suite for PostGIS spatial queries..."
          python test_assignment.py -v --tb=short
        continue-on-error: true

      - name: üìä Calculate Assignment Grade
        run: |
          echo "üìã Calculating PostGIS assignment grade..."
          python grading/calculate_grade.py --verbose --output grade-report.json

      - name: üìà Display Grade Summary
        run: |
          echo "üìä POSTGIS ASSIGNMENT GRADE SUMMARY"
          echo "=================================="
          if [ -f grade-report.json ]; then
            echo "Score: $POSTGIS_ASSIGNMENT_SCORE/20.0 points ($POSTGIS_ASSIGNMENT_PERCENTAGE%)"
            echo "Grade: $POSTGIS_ASSIGNMENT_LETTER_GRADE"
            echo "Status: $POSTGIS_ASSIGNMENT_STATUS"
            echo "Completed Queries: $POSTGIS_COMPLETED_QUERIES/$POSTGIS_TOTAL_QUERIES"
            echo "Test Success Rate: $POSTGIS_TEST_SUCCESS_RATE%"
            echo ""
            echo "üìù Grade report saved to grade-report.json"
          else
            echo "‚ùå Grade report not generated"
          fi

      - name: üìé Upload Grade Report
        uses: actions/upload-artifact@v4
        with:
          name: postgis-basics-grade-report
          path: |
            grade-report.json
            test-results.html
          retention-days: 30

      - name: üìä Upload Test Results and SQL Files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: postgis-basics-test-results
          path: |
            test-results.json
            sql/*.sql
          retention-days: 30

      - name: üéØ Set Job Status Based on Grade
        run: |
          if [ "$POSTGIS_ASSIGNMENT_PERCENTAGE" ]; then
            grade_num=$(echo $POSTGIS_ASSIGNMENT_PERCENTAGE | cut -d'.' -f1)
            if [ "$grade_num" -ge 70 ]; then
              echo "‚úÖ PostGIS assignment passed with $POSTGIS_ASSIGNMENT_PERCENTAGE% (Grade: $POSTGIS_ASSIGNMENT_LETTER_GRADE)"
              exit 0
            else
              echo "‚ùå PostGIS assignment did not meet minimum requirements: $POSTGIS_ASSIGNMENT_PERCENTAGE% (Grade: $POSTGIS_ASSIGNMENT_LETTER_GRADE)"
              echo "üí° Minimum passing grade is 70%"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Could not determine grade - check assignment files"
            exit 1
          fi

      - name: üîç Debug Information (On Failure)
        if: failure()
        run: |
          echo "üêõ DEBUG INFORMATION"
          echo "==================="
          echo "üìÅ Assignment files:"
          ls -la sql/*.sql 2>/dev/null || echo "No SQL files found in sql/ directory"
          echo ""
          echo "üóÑÔ∏è PostGIS database tables:"
          PGPASSWORD=postgres psql -h localhost -p 5433 -U postgres -d gis_fundamentals -c "\dt" || echo "Could not list tables"
          echo ""
          echo "üåç Spatial reference systems:"
          PGPASSWORD=postgres psql -h localhost -p 5433 -U postgres -d gis_fundamentals -c "SELECT DISTINCT ST_SRID(geom) FROM cities;" || echo "Could not check SRID"
          echo ""
          echo "üåê Environment variables:"
          env | grep -E "(POSTGIS|GRADE|TEST)" | sort
          echo ""
          echo "üìä PostGIS status:"
          pg_isready -h localhost -p 5433 -U postgres -d gis_fundamentals || echo "PostGIS database not ready"
          echo ""
          echo "üìê PostGIS version check:"
          PGPASSWORD=postgres psql -h localhost -p 5433 -U postgres -d gis_fundamentals -c "SELECT postgis_version();" || echo "PostGIS not accessible"

      - name: üéì Professional Context Summary
        if: always()
        run: |
          echo ""
          echo "üéì PROFESSIONAL DEVELOPMENT CONTEXT"
          echo "=================================="
          echo "‚úÖ PostGIS Skills Assessed:"
          echo "   ‚Ä¢ Spatial data inspection and geometry properties"
          echo "   ‚Ä¢ Creating geometries with PostGIS functions"
          echo "   ‚Ä¢ Calculating spatial measurements (distance, area, length)"
          echo "   ‚Ä¢ Coordinate reference system transformations"
          echo "   ‚Ä¢ Spatial relationships and topology analysis"
          echo "   ‚Ä¢ Buffer operations and proximity analysis"
          echo "   ‚Ä¢ Advanced spatial joins between datasets"
          echo "   ‚Ä¢ Complex multi-step spatial analysis workflows"
          echo ""
          echo "üè¢ Industry Relevance:"
          echo "   ‚Ä¢ Essential foundation for GIS database administration"
          echo "   ‚Ä¢ Critical for spatial data analysis and web mapping"
          echo "   ‚Ä¢ Required for enterprise geospatial applications"
          echo "   ‚Ä¢ Fundamental for location-based services development"
          echo "   ‚Ä¢ Core skill for urban planning and environmental analysis"
          echo ""
          echo "üöÄ Next Steps:"
          echo "   ‚Ä¢ Ready for advanced PostGIS spatial analysis"
          echo "   ‚Ä¢ Prepared for large-scale OpenStreetMap data processing"
          echo "   ‚Ä¢ Foundation for GeoServer and web mapping services"
          echo "   ‚Ä¢ Equipped for enterprise spatial database optimization"
          echo ""
          echo "üí° Remember: These PostGIS fundamentals power modern GIS applications!"
          echo ""
          echo "üåç Spatial Database Career Paths:"
          echo "   ‚Ä¢ GIS Database Administrator"
          echo "   ‚Ä¢ Spatial Data Engineer"
          echo "   ‚Ä¢ Location Intelligence Analyst"
          echo "   ‚Ä¢ Web GIS Developer"
          echo "   ‚Ä¢ Geospatial Solutions Architect"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "postgis-basics"
version = "1.0.0"
description = "GIST 604B PostGIS Fundamentals Assignment - Spatial Database Basics"
authors = [
    {name = "GIST 604B Course Materials", email = "gist604b@example.edu"}
]
readme = "README.md"
license = {text = "Educational Use Only"}
requires-python = ">=3.11"
keywords = ["gis", "postgis", "spatial", "database", "postgresql", "education"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Database",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Core dependencies for PostGIS database work
dependencies = [
    # PostgreSQL adapter for Python
    "psycopg2-binary>=2.9.9",

    # Spatial data handling and analysis
    "geopandas>=0.14.1",
    "shapely>=2.0.2",
    "pyproj>=3.6.1",
    "fiona>=1.9.5",

    # Data processing and analysis
    "pandas>=2.1.0",
    "numpy>=1.24.0",

    # Visualization (for debugging and learning)
    "matplotlib>=3.7.0",
    "contextily>=1.4.0",

    # File format support
    "geojson>=3.1.0",

    # Utility libraries
    "pathlib2>=2.3.7; python_version<'3.11'",
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
# Test dependencies
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",
    "pytest-mock>=3.11.1",
    "pytest-benchmark>=4.0.0",
    "coverage[toml]>=7.3.0",
]

# Development dependencies
dev = [
    # Code quality and formatting
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.5.0",

    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",

    # Jupyter for interactive development
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "ipywidgets>=8.1.0",

    # Database administration tools
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
]

# Docker and deployment dependencies
docker = [
    "docker-compose>=1.29.0",
    "docker>=6.1.0",
]

# Performance profiling
profiling = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.14",
]

# All optional dependencies combined
all = [
    "postgis-basics[test,dev,docker,profiling]"
]

[project.urls]
Homepage = "https://github.com/your-org/gist-604b-postgis-basics"
Repository = "https://github.com/your-org/gist-604b-postgis-basics.git"
Documentation = "https://gist604b.readthedocs.io/en/latest/module6/"
"Issue Tracker" = "https://github.com/your-org/gist-604b-postgis-basics/issues"

[project.scripts]
# Command-line utilities for students
setup-postgis-db = "postgis_basics.cli:setup_database"
test-connection = "postgis_basics.cli:test_connection"
validate-assignment = "postgis_basics.cli:validate_submission"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# =====================================================
# TESTING CONFIGURATION
# =====================================================

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--maxfail=5",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "database: marks tests that require database connection",
    "docker: marks tests that require Docker",
    "performance: marks performance/benchmark tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Database test configuration
env = [
    "POSTGRES_HOST = localhost",
    "POSTGRES_PORT = 5432",
    "POSTGRES_DB = gis_analysis",
    "POSTGRES_USER = gis_student",
    "POSTGRES_PASSWORD = gis604b",
]

# =====================================================
# CODE QUALITY CONFIGURATION
# =====================================================

[tool.black]
line-length = 88
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | postgres_data
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
known_first_party = ["postgis_basics"]
known_third_party = [
    "psycopg2",
    "geopandas",
    "shapely",
    "pandas",
    "numpy",
    "pytest",
    "matplotlib"
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
files = ["src", "tests"]

# Type checking for third-party libraries
[[tool.mypy.overrides]]
module = [
    "psycopg2.*",
    "geopandas.*",
    "shapely.*",
    "geojson.*",
    "contextily.*",
]
ignore_missing_imports = true

# =====================================================
# COVERAGE CONFIGURATION
# =====================================================

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# =====================================================
# FLAKE8 CONFIGURATION
# =====================================================

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "F401",  # imported but unused (handled by autoflake)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".tox",
    ".venv",
    "postgres_data",
    "htmlcov",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:F401,F811,F841",
]

# =====================================================
# DOCKER AND DEPLOYMENT
# =====================================================

[tool.docker]
# Configuration for Docker-based development
image_name = "gist604b/postgis-basics"
dockerfile = "Dockerfile.dev"
compose_file = "docker-compose.yml"

# Environment variables for Docker development
env_vars = [
    "POSTGRES_HOST=localhost",
    "POSTGRES_PORT=5432",
    "POSTGRES_DB=gis_analysis",
    "POSTGRES_USER=gis_student",
    "POSTGRES_PASSWORD=gis604b",
    "PYTHONPATH=/workspace/src",
]

# =====================================================
# DEVELOPMENT WORKFLOW CONFIGURATION
# =====================================================

[tool.hatch.envs.default]
dependencies = [
    "postgis-basics[test,dev]"
]

[tool.hatch.envs.default.scripts]
# Common development tasks
test = "pytest {args:tests}"
test-cov = "pytest --cov {args:tests}"
cov-report = ["test-cov", "coverage html"]
lint = "flake8 src tests"
format = "black src tests"
sort-imports = "isort src tests"
type-check = "mypy src"
quality = ["lint", "type-check"]
format-all = ["sort-imports", "format"]

# Database-specific tasks
db-up = "docker-compose up -d"
db-down = "docker-compose down"
db-reset = "docker-compose down -v && docker-compose up -d"
db-logs = "docker-compose logs -f postgis"
db-shell = "docker-compose exec postgis psql -U gis_student -d gis_analysis"

# Assignment validation
validate = "python -m postgis_basics.validate"
grade = "python .github/scripts/calculate_grade.py"

[tool.hatch.envs.test]
dependencies = [
    "postgis-basics[test]"
]

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.test.scripts]
run = "pytest {args}"
run-cov = "pytest --cov {args}"

# =====================================================
# EDUCATIONAL METADATA
# =====================================================

[tool.education]
# Metadata specific to educational use
course = "GIST 604B - Open Source GIS Programming"
module = "Module 6 - PostGIS Spatial Database"
assignment = "PostGIS Fundamentals"
difficulty = "intermediate"
estimated_hours = 4
prerequisites = ["Basic SQL knowledge", "Python fundamentals", "GIS concepts"]
learning_objectives = [
    "Connect to PostGIS databases programmatically",
    "Load spatial data from multiple formats",
    "Execute spatial queries using PostGIS functions",
    "Export results in multiple formats",
    "Understand when to use spatial databases vs files",
]

[tool.grading]
# Automated grading configuration
total_points = 20
functions = [
    {name = "connect_to_postgis", points = 5, weight = 25},
    {name = "load_spatial_data", points = 5, weight = 25},
    {name = "analyze_spatial_relationships", points = 5, weight = 25},
    {name = "export_analysis_results", points = 5, weight = 25},
]
code_quality_points = 0
documentation_points = 0
performance_threshold_seconds = 30
